package com.example.gedune.bookcollection.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.gedune.bookcollection.Bean.BookDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_DETAIL".
*/
public class BookDetailDao extends AbstractDao<BookDetail, String> {

    public static final String TABLENAME = "BOOK_DETAIL";

    /**
     * Properties of entity BookDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Subtitle = new Property(1, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Pubdate = new Property(2, String.class, "pubdate", false, "PUBDATE");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Pages = new Property(4, String.class, "pages", false, "PAGES");
        public final static Property Publisher = new Property(5, String.class, "publisher", false, "PUBLISHER");
        public final static Property Isbn13 = new Property(6, String.class, "isbn13", true, "ISBN13");
        public final static Property Summary = new Property(7, String.class, "summary", false, "SUMMARY");
        public final static Property Price = new Property(8, String.class, "price", false, "PRICE");
        public final static Property Tag = new Property(9, String.class, "tag", false, "TAG");
        public final static Property Authors = new Property(10, String.class, "authors", false, "AUTHORS");
        public final static Property Translators = new Property(11, String.class, "translators", false, "TRANSLATORS");
    }


    public BookDetailDao(DaoConfig config) {
        super(config);
    }
    
    public BookDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_DETAIL\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"SUBTITLE\" TEXT," + // 1: subtitle
                "\"PUBDATE\" TEXT," + // 2: pubdate
                "\"IMAGE\" TEXT," + // 3: image
                "\"PAGES\" TEXT," + // 4: pages
                "\"PUBLISHER\" TEXT," + // 5: publisher
                "\"ISBN13\" TEXT PRIMARY KEY NOT NULL ," + // 6: isbn13
                "\"SUMMARY\" TEXT," + // 7: summary
                "\"PRICE\" TEXT," + // 8: price
                "\"TAG\" TEXT," + // 9: tag
                "\"AUTHORS\" TEXT," + // 10: authors
                "\"TRANSLATORS\" TEXT);"); // 11: translators
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookDetail entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(2, subtitle);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(3, pubdate);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(5, pages);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(6, publisher);
        }
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(7, isbn13);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(8, summary);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
 
        String authors = entity.getAuthors();
        if (authors != null) {
            stmt.bindString(11, authors);
        }
 
        String translators = entity.getTranslators();
        if (translators != null) {
            stmt.bindString(12, translators);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookDetail entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(2, subtitle);
        }
 
        String pubdate = entity.getPubdate();
        if (pubdate != null) {
            stmt.bindString(3, pubdate);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String pages = entity.getPages();
        if (pages != null) {
            stmt.bindString(5, pages);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(6, publisher);
        }
 
        String isbn13 = entity.getIsbn13();
        if (isbn13 != null) {
            stmt.bindString(7, isbn13);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(8, summary);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
 
        String authors = entity.getAuthors();
        if (authors != null) {
            stmt.bindString(11, authors);
        }
 
        String translators = entity.getTranslators();
        if (translators != null) {
            stmt.bindString(12, translators);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    @Override
    public BookDetail readEntity(Cursor cursor, int offset) {
        BookDetail entity = new BookDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subtitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pubdate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pages
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publisher
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isbn13
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // summary
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // authors
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // translators
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookDetail entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubtitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPubdate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPages(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublisher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsbn13(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSummary(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthors(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTranslators(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookDetail entity, long rowId) {
        return entity.getIsbn13();
    }
    
    @Override
    public String getKey(BookDetail entity) {
        if(entity != null) {
            return entity.getIsbn13();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookDetail entity) {
        return entity.getIsbn13() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
